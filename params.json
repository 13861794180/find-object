{"name":"Find-Object","tagline":"Simple Qt interface to try OpenCV implementations of SIFT, SURF, FAST, BRIEF and other feature detectors and descriptors.","body":"# Overview\r\n<img src=\"https://raw.githubusercontent.com/introlab/find-object/master/src/resources/Find-Object.png\"\r\n alt=\"Find-Object logo\" title=\"Find-Object\" width=\"120\" />\r\n\r\nUsing a webcam:\r\n 1. Go \"Edit\" -> \"Add object...\",\r\n 2. Present an object, \r\n 3. Select the features extracted from the object, return to main screen,\r\n 4. Play (\"Edit\" -> \"Start\") and \r\n 5. See highlighted features corresponding to the object.\r\n\r\nFeatures:\r\n * You can change any parameters at runtime, make it easier to test feature detectors and descriptors without always recompiling.\r\n * Detectors/descriptors supported (from OpenCV): BRIEF, Dense, FAST, GoodFeaturesToTrack, MSER, ORB, SIFT, STAR, SURF, FREAK and BRISK.\r\n * Sample code with the OpenCV C++ interface [below](http://introlab.github.io/find-object/#Code_example)...\r\n * For an example of an application using SURF descriptors: see my project [RTAB-Map](http://introlab.github.io/rtabmap) (an appearance-based loop closure detector for SLAM).\r\n\r\n# Screenshots\r\n * Add object:\r\n  <img src=https://raw.githubusercontent.com/wiki/introlab/find-object/doc/Add_object.png>\r\n\r\n * Enjoy detections:\r\n  <img src=https://raw.githubusercontent.com/wiki/introlab/find-object/doc/Find_object.png>\r\n\r\n * Change algorithms' parameters (mapping OpenCV names), here using STAR detector and BRIEF descriptors:\r\n  <img src=https://raw.githubusercontent.com/wiki/introlab/find-object/doc/Parameters.png>\r\n\r\n# License\r\n * If OpenCV is built **without the nonfree** module, Find-Object can be used under the permissive BSD License.\r\n * If OpenCV is built **with the nonfree** module, Find-Object is free for research only because it depends on SURF and SIFT features. SIFT and SURF are not free for commercial use.\r\n  * SURF noncommercial notice: http://www.vision.ee.ethz.ch/~surf/download.html\r\n  * SIFT patent: http://www.cs.ubc.ca/~lowe/keypoints/\r\n\r\n# Author\r\n * [Mathieu Labbé](https://introlab.3it.usherbrooke.ca/mediawiki-introlab/index.php?title=Mathieu_Labbé&setlang=en)\r\n  * Similar project: [RTAB-Map](http://introlab.github.io/rtabmap) (6-DOF RGB-D SLAM/scanning with a Kinect)\r\n\r\n# News\r\nJune 2015\r\n * Moving from [GoogleCode](find-object.googlecode.com) to GitHub!\r\n\r\nFebruary 2015\r\n * New Version 0.5.1\r\n  * Added Drag&Drop feature to drop image files into objects and scene panels.\r\n  * Added Save/Load session in File menu. Everything (objects, features extracted, vocabulary and settings) of the current session is saved into a single file, and can be restored very fast.\r\n  * Objects can be added/removed through TCP.\r\n  * ROS: added `session_path` parameter to load a session on start.\r\n  * Downloads:\r\n   * [Find-Object-0.5.1-Source.zip](http://bit.ly/FindObject051zip) (Source)\r\n   * [Find-Object-0.5.1-win64.exe](http://bit.ly/FindObject051win64exe) (Windows binaries, installer)\r\n   * [Find-Object-0.5.1-Darwin.dmg](http://bit.ly/FindObject051dmg) (Mac OS X binaries)\r\nAugust 2014\r\n * New Version 0.5.0\r\n  * Improved stability.\r\n  * Console mode: see `$ find_object --help` on terminal.\r\n  * Added **ASIFT**: check `Feature2D/Affine` parameter to activate. If you have many CPUs, you may want to increase _General/Threads_ to 4.\r\n  * Added library interface.\r\n  * Added **JSON** output and [TCP request example](https://github.com/introlab/find-object/wiki/TcpRequest).\r\n  * Downloads:\r\n   * [Find-Object-0.5.0-Source.zip](http://bit.ly/1pOaPmR) (Source)\r\n   * [Find-Object-0.5.0-Win64.exe](http://bit.ly/1wKTzUp) (Windows binaries, installer)\r\n   * [Find-Object-0.5.0-Win64-cuda.exe](http://bit.ly/VRrzgY) (Windows binaries, installer, CUDA 6 required)\r\n   * [Find-Object-0.5.0-Darwin.dmg](http://bit.ly/1tQlsFU) (Mac OS X binaries)\r\n * I did a fork of the source code for GitHub and I will keep it synchronized with the svn here. It will be easier for you to customize the code with a fork on GitHub.\r\n  * [GitHub for Find-Object](https://github.com/introlab/find-object)\r\n * I posted a video on my another project [RTAB-Map](http://introlab.github.io/rtabmap) where Find-Object runs in parallel during the mapping (you can [try the demo here](http://wiki.ros.org/rtabmap_ros#Robot_mapping_with_Find-Object)). There are five books which can be detected, take a look:\r\n\r\n  <a href=\"http://www.youtube.com/watch?v=o1GSQanY-Do\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/wiki/introlab/rtabmap/doc/video_screenshots/findobject.jpeg\"\r\n alt=\"video\" title=\"video\"/></a>\r\n\r\n[Older news](http://introlab.github.io/find-object/#Older_news)\r\n\r\n# Tutorials\r\n### Find objects with a webcam\r\n<a href=\"https://github.com/introlab/find-object/wiki/FindObjectsWithWebcam\"><img src=\"https://raw.githubusercontent.com/wiki/introlab/find-object/doc/tutorial1/13.png\" alt=\"Find objects with a webcam\"></a>\r\n\r\n### About changing parameters\r\n<a href=\"https://github.com/introlab/find-object/wiki/ChangeParameters\"><img src=\"https://raw.githubusercontent.com/wiki/introlab/find-object/doc/tutorial2/4.png\" alt=\"About changing parameters\"></a>\r\n\r\n### Place recognition (likelihood computation)\r\n<a href=\"https://github.com/introlab/find-object/wiki/InvertedSearch\"><img src=\"https://raw.githubusercontent.com/wiki/introlab/find-object/doc/tutorial3/12.png\" alt=\"Place recognition (likelihood computation)\"></a>\r\n\r\n### Detection of multiple occurrences of the same object\r\n<a href=\"https://github.com/introlab/find-object/wiki/MultiDetection\"><img src=\"https://raw.githubusercontent.com/wiki/introlab/find-object/doc/tutorial4/1.png\" alt=\"Detection of multiple occurrences of the same object\"></a>\r\n\r\n### Beers wall (many objects detection)\r\n<a href=\"https://github.com/introlab/find-object/wiki/BeersWall\"><img src=\"https://raw.githubusercontent.com/wiki/introlab/find-object/doc/tutorial5/results1000.jpg\" alt=\"Detection of multiple occurrences of the same object\"></a>\r\n\r\n### TCP request\r\n<a href=\"https://github.com/introlab/find-object/wiki/TcpRequest\"><img src=\"https://raw.githubusercontent.com/wiki/introlab/find-object/doc/tcp_request.png\" alt=\"TCP request example\"></a>\r\n\r\n# Install\r\n\r\n## Binaries (recommended)\r\n * Windows : Download the `Find-Object-#.#.#-Win32.exe` or `Find-Object-#.#.#-Win32.zip` in the [News](http://introlab.github.io/find-object/#News) section above.\r\n * Mac OS X : Download the `Find-Object-#.#.#-Darwin.dmg` file in the [News](http://introlab.github.io/find-object/#News) section above.\r\n * Linux : See [From source](http://introlab.github.io/find-object/#From_source_(Ubuntu,_Mac_OS_X,_Windows)) below.\r\n\r\n## ROS\r\n See [find_object_2d](https://github.com/introlab/find-object/tree/find_object_2d#find_object_2d-ros-package) branch on GitHub.\r\n\r\n## From source (Ubuntu, Mac OS X, Windows)\r\n### Requirements\r\n * CMake (tested on 2.8.7)\r\n * Qt4 (tested on 4.8.1)\r\n * OpenCV (tested on 2.4.0 / trunk now on 2.4.3rc)\r\n * Visual Studio or MinGW (only for Windows)\r\n```bash\r\nUbuntu :\r\n $ sudo apt-get install cmake libqt4-dev libopencv2.4-dev\r\n```\r\n\r\n### Download\r\n * Download ZIP file on top of this page or clone the latest version from GIT:\r\n```bash\r\n $ git clone https://github.com/introlab/find-object.git\r\n```\r\n\r\n### Build\r\n * Unix (Ubuntu, Mac OS X):\r\n```bash\r\n $ cd find_object/build\r\n $ cmake -DCMAKE_BUILD_TYPE=Release ..\r\n $ make\r\n $ cd ../bin\r\n $ ./find_object\r\n```\r\n * Windows (Visual Studio):\r\n```bash\r\n $ cd find_object/build\r\n $ cmake -G\"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release ..\r\n $ nmake\r\n $ cd ../bin\r\n $ Find-Object.exe\r\n```\r\n * Windows (MinGW):\r\n```bash\r\n $ cd find_object/build\r\n $ cmake -G\"MinGW Makefiles\" -DCMAKE_BUILD_TYPE=Release ..\r\n $ make\r\n $ cd ../bin\r\n $ Find-Object.exe\r\n```\r\n\r\n# Uninstall\r\n * Windows:\r\n  * Use the uninstaller.\r\n  * For a full cleanup, you can remove the config file in `$USER_DIRECTORY$/Documents/FindObject`.\r\n * Mac OS X:\r\n  * Drag and drop the application in the trash.\r\n  * For a full cleanup, you can remove the config file in `~/.find_object`.\r\n * Ubuntu or Mac OS X \"Unix\" installation style:\r\n  * Remove `$YOUR_INSTALL_PATH$/bin/find_object` (default path is `/usr/local/bin/find_object`).\r\n  * For a full cleanup, you can remove the config file in `~/.find_object`.\r\n```bash\r\n $ sudo rm /usr/local/bin/find_object\r\n $ rm -rf ~/.find_object\r\n```\r\n\r\n# Code example\r\n * Here an example of features extraction (with OpenCV C++ interface) and nearest neighbor search with Flann library. This code can be found in this sample application [main.cpp](https://github.com/introlab/find-object/blob/master/example/main.cpp). Sample images from OpenCV : [box.png](https://raw.githubusercontent.com/wiki/introlab/find-object/find_object/bin/box.png) and [box_in_scene.png](https://raw.githubusercontent.com/wiki/introlab/find-object/find_object/bin/box_in_scene.png). Example results:\r\n```bash\r\n./find_object-example box.png box_in_scene.png\r\nLoading images: 5 ms\r\nObject: 198 keypoints detected in 12 ms\r\nScene: 355 keypoints detected in 27 ms\r\nObject: 198 descriptors extracted in 20 ms\r\nScene: 355 descriptors extracted in 42 ms\r\nTime creating FLANN index = 3 ms\r\nTime nearest neighbor search = 3 ms\r\nTime finding homography = 2 ms\r\nInliers=34 Outliers=12\r\n```\r\n<img src=\"https://raw.githubusercontent.com/wiki/introlab/find-object/doc/Box_example.png\">\r\n```cpp\r\n// OpenCV stuff\r\n#include <opencv2/core/core.hpp>\r\n#include <opencv2/highgui/highgui.hpp>\r\n#include <opencv2/features2d/features2d.hpp>\r\n#include <opencv2/nonfree/features2d.hpp>\r\n#include <opencv2/calib3d/calib3d.hpp> // for homography\r\n\r\n//...\r\n\r\n// LOAD IMAGES (as grayscale)\r\ncv::Mat objectImg = cv::imread(argv[1], cv::IMREAD_GRAYSCALE);\r\n﻿cv::Mat sceneImg = cv::imread(argv[2], cv::IMREAD_GRAYSCALE);\r\n\r\nstd::vector<cv::KeyPoint> objectKeypoints;\r\n﻿std::vector<cv::KeyPoint> sceneKeypoints;\r\n﻿cv::Mat objectDescriptors;\r\n﻿cv::Mat sceneDescriptors;\r\n\r\n////////////////////////////\r\n﻿// EXTRACT KEYPOINTS\r\n﻿////////////////////////////\r\n﻿// The detector can be any of (see OpenCV features2d.hpp):\r\n﻿// cv::FeatureDetector * detector = new cv::DenseFeatureDetector();\r\n﻿// cv::FeatureDetector * detector = new cv::FastFeatureDetector();\r\n﻿// cv::FeatureDetector * detector = new cv::GFTTDetector();\r\n// cv::FeatureDetector * detector = new cv::MSER();\r\n﻿// cv::FeatureDetector * detector = new cv::ORB();\r\n﻿cv::FeatureDetector * detector = new cv::SIFT();\r\n﻿// cv::FeatureDetector * detector = new cv::StarFeatureDetector();\r\n﻿// cv::FeatureDetector * detector = new cv::SURF(600.0);\r\n// cv::FeatureDetector * detector = new cv::BRISK();\r\n﻿detector->detect(objectImg, objectKeypoints);\r\n﻿detector->detect(sceneImg, sceneKeypoints);\r\ndelete detector;\r\n\r\n////////////////////////////\r\n// EXTRACT DESCRIPTORS\r\n////////////////////////////\r\n// The extractor can be any of (see OpenCV features2d.hpp):\r\n﻿// cv::DescriptorExtractor * extractor = new cv::BriefDescriptorExtractor();\r\n// cv::DescriptorExtractor * extractor = new cv::ORB();\r\ncv::DescriptorExtractor * extractor = new cv::SIFT();\r\n﻿// cv::DescriptorExtractor * extractor = new cv::SURF(600.0);\r\n// cv::DescriptorExtractor * extractor = new cv::BRISK();\r\n// cv::DescriptorExtractor * extractor = new cv::FREAK();\r\n﻿extractor->compute(objectImg, objectKeypoints, objectDescriptors);\r\n﻿extractor->compute(sceneImg, sceneKeypoints, sceneDescriptors);\r\ndelete extractor;\r\n\r\n////////////////////////////\r\n﻿// NEAREST NEIGHBOR MATCHING USING FLANN LIBRARY (included in OpenCV)\r\n﻿////////////////////////////\r\ncv::Mat results;\r\ncv::Mat dists;\r\nint k=2; // find the 2 nearest neighbors\r\nif(objectDescriptors.type()==CV_8U)\r\n{\r\n\t// Binary descriptors detected (from ORB or Brief)\r\n\r\n\t// Create Flann LSH index\r\n\tcv::flann::Index flannIndex(sceneDescriptors, cv::flann::LshIndexParams(12, 20, 2), cvflann::FLANN_DIST_HAMMING);\r\n\r\n\t// search (nearest neighbor)\r\n\tflannIndex.knnSearch(objectDescriptors, results, dists, k, cv::flann::SearchParams() );\r\n}\r\nelse\r\n{\r\n\t// assume it is CV_32F\r\n\t// Create Flann KDTree index\r\n\tcv::flann::Index flannIndex(sceneDescriptors, cv::flann::KDTreeIndexParams(), cvflann::FLANN_DIST_EUCLIDEAN);\r\n\r\n\t// search (nearest neighbor)\r\n\tflannIndex.knnSearch(objectDescriptors, results, dists, k, cv::flann::SearchParams() );\r\n}\r\n\r\n// Conversion to CV_32F if needed\r\nif(dists.type() == CV_32S)\r\n{\r\n\tcv::Mat temp;\r\n\tdists.convertTo(temp, CV_32F);\r\n\tdists = temp;\r\n}\r\n﻿\r\n\r\n////////////////////////////\r\n// PROCESS NEAREST NEIGHBOR RESULTS\r\n////////////////////////////\r\n// Find correspondences by NNDR (Nearest Neighbor Distance Ratio)\r\nfloat nndrRatio = 0.8;\r\nstd::vector<cv::Point2f> mpts_1, mpts_2; // Used for homography\r\nstd::vector<int> indexes_1, indexes_2; // Used for homography\r\nstd::vector<uchar> outlier_mask;  // Used for homography\r\nfor(unsigned int i=0; i<objectData.rows; ++i)\r\n{\r\n\t// Check if this descriptor matches with those of the objects\r\n\t// Apply NNDR\r\n\tif(results.at<int>(i,0) >= 0 && results.at<int>(i,1) >= 0 && dists.at<float>(i,0) <= nndrRatio * dists.at<float>(i,1))\r\n\t{\r\n\t\tmpts_1.push_back(objectKeypoints.at(i).pt);\r\n\t\tindexes_1.push_back(i);\r\n\r\n\t\tmpts_2.push_back(sceneKeypoints.at(results.at<int>(i,0)).pt);\r\n\t\tindexes_2.push_back(results.at<int>(i,0));\r\n\t}\r\n}\r\n\r\n// FIND HOMOGRAPHY\r\nint nbMatches = 8;\r\nif(mpts_1.size() >= nbMatches)\r\n{\r\n\tcv::Mat H = findHomography(mpts_1,\r\n\t\t\tmpts_2,\r\n\t\t\tcv::RANSAC,\r\n\t\t\t1.0,\r\n\t\t\toutlier_mask);\r\n\t// Do what you want with the homography (like showing a rectangle)\r\n\t// The \"outlier_mask\" contains a mask representing the inliers and outliers.\r\n\t// ...\r\n}\r\n\r\n``` \r\n\r\n# Older news\r\nJuly 2014\r\n * **ROS** new feature \r\n  * When using Kinect-like sensors, you can set **find_object_2d** node in a mode that  publishes 3D positions of the objects over TF. See 3D position of objects on ROS [find_object_2d](http://wiki.ros.org/find_object_2d) page.\r\n  <img src=https://raw.githubusercontent.com/wiki/introlab/find-object/doc/ros_find_object_3d.png width=600>\r\n\r\nJune 2014\r\n * New Version 0.4.6\r\n  * Fixed a bug when changing from float descriptors to binary descriptors (issue 22).\r\n  * Fixed slow BRISK issue... now running under 10 ms (issue 21).\r\n  * Fixed missing libOpenNI.dylib on Mac (issue 25).\r\n  * Downloads:\r\n   * [Find-Object-0.4.6-Source.zip](http://bit.ly/1pnrmPW) (Source)\r\n   * [Find-Object-0.4.6-Win64.exe](http://bit.ly/VrDu5B) (Windows binaries, installer)\r\n   * [Find-Object-0.4.6-Win64-cuda6.exe](http://bit.ly/VrCZsc) (Windows binaries, installer, CUDA 6 required)\r\n   * [Find-Object-0.4.6-Darwin.dmg](http://bit.ly/1wCc0Hi) (Mac OS X binaries)\r\n * New Version 0.4.5\r\n  * Added GPU-SURF support when OpenCV is built with CUDA. See parameter \"Feature2D -> SURF -> SURF_gpu\".\r\n  * Downloads:\r\n   * [Find-Object-0.4.5-Source.zip](http://bit.ly/1qpURA3) (Source)\r\n   * [Find-Object-0.4.5-win64-cuda6.exe](http://bit.ly/1oCcBbL) (Windows 64 bits binaries, installer, [CUDA 6](https://developer.nvidia.com/cuda-downloads) driver required)\r\n * New Version 0.4.4\r\n  * Added bag-of-words (BOW) matching using an **incremental vocabulary**.\r\n   * New tutorial [Beers wall](https://github.com/introlab/find-object/wiki/BeersWall) for detection of many objects.\r\n   * Updated tutorial [Place recognition](https://github.com/introlab/find-object/wiki/InvertedSearch).\r\n  * Downloads:\r\n   * [Find-Object-0.4.4-Darwin.dmg](http://bit.ly/1n4p9mU) (Mac OS X binaries)\r\n   * [Find-Object-0.4.4-Source.zip](http://bit.ly/1xFFOV3) (Source)\r\n   * [Find-Object-0.4.4-Win32.exe](http://bit.ly/1nwa6E5) (Windows binaries, installer)\r\n   * [Find-Object-0.4.4-Win32.zip](http://bit.ly/1oS4a87) (Windows binaries)\r\nMay 2014\r\n * New Version 0.4.3\r\n  * Added **TCP/IP interface** to publish information about detected objects on a port.\r\n  * Updated tutorial [FindObjectsWithWebcam](https://github.com/introlab/find-object/wiki/FindObjectsWithWebcam#TCP_information) with TCP connection example.\r\n  * Downloads:\r\n   * [Find-Object-0.4.3-Darwin.dmg](http://bit.ly/1fN33Xe) (Mac OS X binaries)\r\n   * [Find-Object-0.4.3-Source.zip](http://bit.ly/RkSGyY) (Source)\r\n   * [Find-Object-0.4.3-Win32.exe](http://bit.ly/1kJ7ikd) (Windows binaries, installer)\r\n   * [Find-Object-0.4.3-Win32.zip](http://bit.ly/1lVAiIj) (Windows binaries)\r\nApril 2014\r\n * New Version 0.4.2\r\n  * Updated ros-pkg for ROS Hydro (Catkin build).\r\n  * Mouse over parameters' label to show a description.\r\n  * **Multi-threading** : See `General/threads` parameter. \r\n  * Detection of **multiple occurrences of the same object** : See `General/multiDetection` parameter and tutorial [MultiDetection](https://github.com/introlab/find-object/wiki/MultiDetection).\r\n  * Added save/load settings in File menu.\r\n  * Downloads:\r\n   * [Find-Object-0.4.2-Darwin.dmg](http://bit.ly/1etchYj) (Mac OS X binaries)\r\n   * [Find-Object-0.4.2-Source.zip](http://bit.ly/1etcxXl) (Source)\r\n   * [Find-Object-0.4.2-Win32.exe](http://bit.ly/1ne1qkL) (Windows binaries, installer)\r\n   * [Find-Object-0.4.2-Win32.zip](http://bit.ly/1n1CPlP) (Windows binaries)\r\nFebruary 2013\r\n * New version 0.4.1\r\n  * Updated binary/source releases with OpenCV 2.4.3. **FREAK** and **BRISK** descriptors are now available.\r\nAugust 2012\r\n * New version 0.4.0\r\n  * Added camera controls to browse frames of a video file or a directory of images.\r\n  * New **inverted search mode** for likelihood computation (see this [InvertedSearch tutorial](https://github.com/introlab/find-object/wiki/InvertedSearch)).\r\n  * Added in the \"Parameters\" panel a new group for the choice of the FLANN nearest neighbor strategy (KD-Tree, K-Means, Linear, composite, auto-tuned). All FLANN parameters can be modified.\r\n  * Added 3 tutorials [below](http://introlab.github.io/find-object/#Tutorials).\r\nMay 2012\r\n * New version 0.3.0.\r\n  * Updated to use OpenCV 2.4 and ROS Fuerte. Some feature detectors/descriptors were updated with new/removed/modified parameters from OpenCV 2.4. \r\n  * Updated example [below](http://introlab.github.io/find-object/#Code_example) accordingly to changes from OpenCV 2.4.\r\n  * If you upgrade from a previous version, it is recommended to execute \"Edit->Restore all default settings\" to clean the parameters.\r\nFebruary 2012\r\n * New version 0.2.2\r\n  * Support still images processing (png, jpg, bmp, tiff). Objects can be added from image files (Edit->Add objects from files...) and a scene can be loaded from an image file (Edit->Load scene from file...).\r\n  * Objects can be updated more easily when parameters are changed (button \"Update objects\"). You can also set \"true\" parameter General/autoUpdateObjects to update objects for each change \"on the fly\".\r\n  * Modified how objects are saved/loaded, now to/from a directory of images.\r\n  * Camera can be also set to use a video file (avi), see \"Edit->Camera from video file...\".\r\n  * ROS package's name is changed to find_object_2d, to differ from existing find_object package on the ROS's [wiki](http://www.ros.org/wiki/find_object).\r\nJanuary 2012\r\n * New version 0.2.1\r\n  * Fixed a crash on Windows when adding an object (r67).\r\n  * New parameter `Homography/homographyComputed` to detect outliers using RANSAC (default true). It is the same behavior as before, but it can be now easily deactivated to show all matched features. With the ROS package, this parameter must be on to publish objects detected.\r\n  * New parameters `NN/minDistanceUsed` and `NN/minDistance` can be used instead of/or with the NNDR criterion for nearest neighbor matching. To accept a match, the distance with the nearest neighbor must be < minDistance. New statistics are added in Statistics panel to show the min and max matched distances, to better set this parameter across the different descriptors. For info when using NNDR, a match is accepted if the distance with the nearest neighbor is < nndrRatio X distance with the second nearest neighbor (see [Lowe](http://www.google.com/url?sa=t&rct=j&q=distinctive%20image%20features%20from%20scale-invariant%20keypoints&source=web&cd=1&ved=0CCEQFjAA&url=http%3A%2F%2Fwww.cs.ubc.ca%2F~lowe%2Fpapers%2Fijcv04.pdf&ei=bvoET9jNLcne0QH336mHAg&usg=AFQjCNExaFk5YsadEaL01y1K6FRDDh5u3g) (figure 11) to know how to adjust this parameter). \r\n  * ROS package: the full homography is sent with objects detected (a more general way than only sending the center position of the objects). See [find_object_2d](http://www.ros.org/wiki/find_object_2d) for more details.","google":"UA-56986679-2","note":"Don't delete this file! It's used internally to help with page regeneration."}